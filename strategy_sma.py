# -*- coding: utf-8 -*-
"""Strategy - SMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kjWnJbSdobo9-z8UBjmY5XRjH9Kfw3JF
"""

import yfinance as yf
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from datetime import date, timedelta

#Function to compute Simple Moving Average
def simple_mov_avg(close_data, window):
  len_data = len(close_data)
  #print(len_data)
  s = [] #To store closing price of each day in 20-day window
  sma = [] #To store each 20-day SMA calculated

  for i in range(len_data-1, window-2, -1):
    s = []
    for j in range(i,i-window,-1):
      s.append(close_data[j])
    sma.append(np.mean(s))

  #Pad NaN values to match array length with Date array
  sma = np.pad(sma, (0, len(close_data) - len(sma)), mode='constant', constant_values=np.nan)

  return(sma)
  print(sma)

#date format - '%Y-%m-%d
stock_data = yf.download('AAPL', start='2023-12-28', end='2024-12-28')
stock_data = stock_data.reset_index()
stock_data.head()

print(stock_data.describe())

close_data_1 = stock_data['Adj Close']
close_data = close_data_1['AAPL']
plt.plot(close_data)

sma_20 = simple_mov_avg(close_data, 20)
sma_20 = np.pad(sma_20, (0, len(close_data) - len(sma_20)), mode='constant', constant_values=np.nan)
plt.plot(sma_20)

sma_50 = simple_mov_avg(close_data, 50)
date_vec = stock_data['Date']
plt.plot(date_vec, sma_20[::-1], date_vec, sma_50[::-1])