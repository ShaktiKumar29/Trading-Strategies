# -*- coding: utf-8 -*-
"""Strategy - EMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qzj3mOU-QeA5pPkLqIQ0aNLdJ0e_naJd
"""

import yfinance as yf
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from datetime import date, timedelta

#Calculate SMA for initial EMA calculation
def sma_for_ema(adj_close_data, window):
  data_len = len(adj_close_data)
  s = []
  for i in range(data_len-1, data_len-window-1, -1):
    s.append(adj_close_data[i])
  sma_window = np.mean(s)
  return sma_window

#Calculating EMA
def exp_mov_avg(adj_close_data, window):
  data_len = len(adj_close_data)
  ema_calc = np.zeros(data_len)
  sma_calc = sma_for_ema(adj_close_data, window)
  wt = 2/(window+1)
  ema_calc[data_len-1] = (adj_close_data[data_len-1]*wt)+(sma_calc*(1-wt))

  for i in range(data_len-2, -1, -1):
    ema_calc[i] = (adj_close_data[i]*wt) + (ema_calc[i+1]*(1-wt))
  return ema_calc



#date format - '%Y-%m-%d
stock_data = yf.download("AAPL", start="2023-12-28", end="2024-12-28")
stock_data = stock_data.reset_index()
stock_data.head()

stock_data.describe()

adj_close_data1 = stock_data['Adj Close']
adj_close_data = adj_close_data1['AAPL']

#Compute 20-day & 60-day EMA
ema_20 = exp_mov_avg(adj_close_data, 20)
ema_60 = exp_mov_avg(adj_close_data, 60)

#plt.plot(range(len(adj_close_data)), exp_mov_avg(adj_close_data, 20), exp_mov_avg(adj_close_data, 60))
plt.plot(stock_data['Date'], ema_20, stock_data['Date'], ema_60)